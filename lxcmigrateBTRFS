#!/bin/bash

# LXC container migration script between servers.
# The connection is made from the server hosting the running containers (source server)
# to the destination server, where the containers will be migrated.
#
# FUNCTIONALITY:
# 1. Stops the container on the source server.
# 2. Connects to the destination server and transfers the container using rsync.
# 3. Creates a Btrfs volume on the destination server for the container.
# 4. Moves the content to the new Btrfs volume.
# 5. Verifies that the transferred data matches in size using a checksum.
# 6. Cleans up temporary data on the destination server.
#
# USAGE:
#   $0 <destination_ip> <container_file>
# Where:
#   - <destination_ip>: IP or hostname of the destination server.
#   - <container_file>: File containing the container names, one per line.

# Configurable variables
DESTINO_SERVIDOR="$1"
FICHERO_CONTENEDORES="$2"
LLAVE_SSH="~/.ssh/id_rsa" # Update with the correct SSH key path
CONEXION_SSH="ssh -i $LLAVE_SSH $DESTINO_SERVIDOR"

# Show help if requested
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: $0 <destination_ip> <container_file>"
    echo
    echo "This script migrates LXC containers from the source server to the destination server."
    echo "It assumes SSH connectivity is pre-configured using an SSH key."
    echo
    echo "Parameters:"
    echo "  <destination_ip>: IP or hostname of the destination server."
    echo "  <container_file>: File containing the container names to migrate, one per line."
    echo
    echo "Options:"
    echo "  -h, --help: Displays this help message."
    exit 0
fi

if [[ -z "$DESTINO_SERVIDOR" || -z "$FICHERO_CONTENEDORES" ]]; then
    echo "Usage: $0 <destination_ip> <container_file>" >&2
    exit 1
fi

if [[ ! -f "$FICHERO_CONTENEDORES" ]]; then
    echo "Error: The file $FICHERO_CONTENEDORES does not exist." >&2
    exit 1
fi

while read -r CONTENEDOR; do
    if [[ -z "$CONTENEDOR" ]]; then
        continue
    fi

    # Stop the container on the source server
    echo "Stopping container $CONTENEDOR on the source server..."
    lxc-stop -n "$CONTENEDOR" || {
        echo "Error: Failed to stop container $CONTENEDOR on the source server." >&2
        continue
    }

    echo "Connecting to the destination server and transferring the container..."
    rsync -aHAX --numeric-ids --progress -e "ssh -i $LLAVE_SSH" "/var/lib/lxc/$CONTENEDOR" "$DESTINO_SERVIDOR:/tmp/$CONTENEDOR" || {
        echo "Error: Failed to transfer container $CONTENEDOR to the destination server." >&2
        continue
    }

    while true; do
        # Calculate checksum on source
        ORIGEN_CHECKSUM=$(du -sb "/var/lib/lxc/$CONTENEDOR" | awk '{print $1}')

        # Calculate checksum on destination
        DESTINO_CHECKSUM=$($CONEXION_SSH "du -sb /tmp/$CONTENEDOR" | awk '{print $1}')

        # Verify checksum
        if [[ "$ORIGEN_CHECKSUM" -ne "$DESTINO_CHECKSUM" ]]; then
            echo "Error: Transferred data for container $CONTENEDOR does not match. Retrying transfer..." >&2
            $CONEXION_SSH "sudo rm -rf /tmp/$CONTENEDOR" || {
                echo "Error: Failed to clean up destination folder." >&2
                break
            }
            rsync -aHAX --numeric-ids --progress -e "ssh -i $LLAVE_SSH" "/var/lib/lxc/$CONTENEDOR" "$DESTINO_SERVIDOR:/tmp/$CONTENEDOR" || {
                echo "Error: Failed to retransmit container $CONTENEDOR." >&2
                break
            }
        else
            break
        fi
    done

    # Create a Btrfs volume on the destination server
    echo "Creating Btrfs volume for $CONTENEDOR on the destination server..."
    $CONEXION_SSH "sudo btrfs subvolume create /var/lib/lxc/$CONTENEDOR/rootfs" || {
        echo "Error: Failed to create Btrfs volume on the destination server." >&2
        continue
    }

    # Move content to the Btrfs volume
    echo "Moving content to the Btrfs volume..."
    $CONEXION_SSH "sudo rsync -aHAX --numeric-ids /tmp/$CONTENEDOR/rootfs/ /var/lib/lxc/$CONTENEDOR/rootfs/" || {
        echo "Error: Failed to move content to the Btrfs volume." >&2
        continue
    }

    # Clean up the temporary folder
    $CONEXION_SSH "sudo rm -rf /tmp/$CONTENEDOR/" || {
        echo "Error: Failed to clean up the temporary folder." >&2
        continue
    }

    echo "Migration of container $CONTENEDOR completed successfully."
done < "$FICHERO_CONTENEDORES"

echo "Migration completed for all containers in the file $FICHERO_CONTENEDORES."
